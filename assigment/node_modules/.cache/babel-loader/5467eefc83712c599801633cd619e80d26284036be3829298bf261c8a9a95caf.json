{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rithe\\\\OneDrive\\\\Desktop\\\\PROJECTIARE\\\\assigment\\\\src\\\\SolveProblemPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport Split from \"react-split\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport \"./SolveProblemPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SolveProblemPage({\n  problems,\n  userInfo\n}) {\n  _s();\n  const {\n    problemId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const problem = problems.find(p => String(p.id) === String(problemId)) || {};\n  const [testCaseResults, setTestCaseResults] = useState([null, null, null, null, null]);\n  const [tab, setTab] = useState(\"description\");\n  const [code, setCode] = useState(\"// Write your code here...\");\n  const [language, setLanguage] = useState(\"python\");\n  const [customInput, setCustomInput] = useState(\"\");\n  const [runMessage, setRunMessage] = useState(\"\");\n  const [customOutput, setCustomOutput] = useState(\"\");\n  const [isDisqualified, setIsDisqualified] = useState(false); // State for malpractice\n\n  const example = problem.example || {\n    input: \"1 2\",\n    output: \"3\"\n  };\n\n  // --- Exam Mode and Malpractice Detection ---\n  useEffect(() => {\n    var _location$state;\n    // 1. Enter Full-Screen on component mount if in exam mode\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.examMode) {\n      const element = document.documentElement;\n      if (element.requestFullscreen) {\n        element.requestFullscreen().catch(err => {\n          console.error(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);\n        });\n      }\n    }\n\n    // 2. Malpractice event handler\n    const handleMalpractice = () => {\n      // If the user is no longer in full-screen, flag them.\n      if (!document.fullscreenElement) {\n        setIsDisqualified(true);\n        // Here you would also typically send a log to your backend\n        console.warn(\"Malpractice detected: User exited full-screen.\");\n      }\n    };\n\n    // 3. Add listeners\n    document.addEventListener(\"fullscreenchange\", handleMalpractice);\n    window.addEventListener(\"blur\", handleMalpractice); // Detects tab/window switching\n\n    // 4. Cleanup listeners on component unmount\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleMalpractice);\n      window.removeEventListener(\"blur\", handleMalpractice);\n      // Ensure user exits fullscreen when leaving the page\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    };\n  }, [location.state]);\n  const handleRun = () => {/* ... existing logic */};\n  const handleRunCustom = () => {/* ... existing logic */};\n  const handleSubmit = () => {/* ... existing logic */};\n\n  // Render a disqualification overlay if malpractice is detected\n  if (isDisqualified) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disqualified-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Malpractice Detected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You have been disqualified for leaving the full-screen mode.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your session has been terminated.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: () => navigate(\"/\"),\n        children: \"Return to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solve-problem-page-root\",\n    children: /*#__PURE__*/_jsxDEV(Split, {\n      className: \"split-panel\",\n      sizes: [46, 54],\n      minSize: 320,\n      gutterSize: 6,\n      cursor: \"col-resize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-question-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: problem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-editor-panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(SolveProblemPage, \"X2DNQj1+Zf/Z07290NzU5dNRNBM=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = SolveProblemPage;\nexport default SolveProblemPage;\nvar _c;\n$RefreshReg$(_c, \"SolveProblemPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","Split","MonacoEditor","jsxDEV","_jsxDEV","SolveProblemPage","problems","userInfo","_s","problemId","navigate","location","problem","find","p","String","id","testCaseResults","setTestCaseResults","tab","setTab","code","setCode","language","setLanguage","customInput","setCustomInput","runMessage","setRunMessage","customOutput","setCustomOutput","isDisqualified","setIsDisqualified","example","input","output","_location$state","state","examMode","element","document","documentElement","requestFullscreen","catch","err","console","error","message","name","handleMalpractice","fullscreenElement","warn","addEventListener","window","removeEventListener","exitFullscreen","handleRun","handleRunCustom","handleSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","sizes","minSize","gutterSize","cursor","title","_c","$RefreshReg$"],"sources":["C:/Users/rithe/OneDrive/Desktop/PROJECTIARE/assigment/src/SolveProblemPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport Split from \"react-split\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport \"./SolveProblemPage.css\";\n\nfunction SolveProblemPage({ problems, userInfo }) {\n  const { problemId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const problem = problems.find((p) => String(p.id) === String(problemId)) || {};\n\n  const [testCaseResults, setTestCaseResults] = useState([null, null, null, null, null]);\n  const [tab, setTab] = useState(\"description\");\n  const [code, setCode] = useState(\"// Write your code here...\");\n  const [language, setLanguage] = useState(\"python\");\n  const [customInput, setCustomInput] = useState(\"\");\n  const [runMessage, setRunMessage] = useState(\"\");\n  const [customOutput, setCustomOutput] = useState(\"\");\n  const [isDisqualified, setIsDisqualified] = useState(false); // State for malpractice\n\n  const example = problem.example || { input: \"1 2\", output: \"3\" };\n\n  // --- Exam Mode and Malpractice Detection ---\n  useEffect(() => {\n    // 1. Enter Full-Screen on component mount if in exam mode\n    if (location.state?.examMode) {\n      const element = document.documentElement;\n      if (element.requestFullscreen) {\n        element.requestFullscreen().catch(err => {\n          console.error(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);\n        });\n      }\n    }\n\n    // 2. Malpractice event handler\n    const handleMalpractice = () => {\n      // If the user is no longer in full-screen, flag them.\n      if (!document.fullscreenElement) {\n        setIsDisqualified(true);\n        // Here you would also typically send a log to your backend\n        console.warn(\"Malpractice detected: User exited full-screen.\");\n      }\n    };\n\n    // 3. Add listeners\n    document.addEventListener(\"fullscreenchange\", handleMalpractice);\n    window.addEventListener(\"blur\", handleMalpractice); // Detects tab/window switching\n\n    // 4. Cleanup listeners on component unmount\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleMalpractice);\n      window.removeEventListener(\"blur\", handleMalpractice);\n      // Ensure user exits fullscreen when leaving the page\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    };\n  }, [location.state]);\n\n\n  const handleRun = () => { /* ... existing logic */ };\n  const handleRunCustom = () => { /* ... existing logic */ };\n  const handleSubmit = () => { /* ... existing logic */ };\n  \n  // Render a disqualification overlay if malpractice is detected\n  if (isDisqualified) {\n    return (\n      <div className=\"disqualified-overlay\">\n        <h2>Malpractice Detected</h2>\n        <p>You have been disqualified for leaving the full-screen mode.</p>\n        <p>Your session has been terminated.</p>\n        <button className=\"back-btn\" onClick={() => navigate(\"/\")}>Return to Dashboard</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"solve-problem-page-root\">\n      {/* All the existing JSX for the split panel editor */}\n      <Split\n        className=\"split-panel\"\n        sizes={[46, 54]}\n        minSize={320}\n        gutterSize={6}\n        cursor=\"col-resize\"\n      >\n        {/* LEFT PANEL */}\n        <div className=\"left-question-panel\">\n          {/* Note: The back button is removed or disabled in exam mode for security */}\n          {/* ... The rest of your left panel JSX ... */}\n          <h2>{problem.title}</h2>\n          {/* ... aall other content ... */}\n        </div>\n        {/* RIGHT PANEL */}\n        <div className=\"right-editor-panel\">\n          {/* ... The rest of your right panel JSX ... */}\n        </div>\n      </Split>\n    </div>\n  );\n}\n\nexport default SolveProblemPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}